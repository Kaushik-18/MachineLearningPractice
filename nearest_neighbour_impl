import numpy as np
import pandas as pd
from math import sqrt
import matplotlib.pyplot as plot
from matplotlib import style
from collections import Counter
import random

data_set = {'k': [[1, 2], [2, 3], [3, 1]], 'r': [[6, 5], [7, 7], [8, 6]]}
new_features = [5, 7]


def k_nearest_algorithm(data, predict, k=3):
    if len(data) >= k:
        print("Warning")

    distances = []
    for group in data:
        for feature in data[group]:
            # using a faster version of the actual euclidean distance formula
            #  np.sqrt(np.sum((np.array(feature)-np.array(predict))**2))
            ec_distance = np.linalg.norm(np.array(feature) - np.array(predict))
            distances.append([ec_distance, group])

    votes = [i[1] for i in sorted(distances)[:k]]
    result = Counter(votes).most_common(1)[0][0]
    confidence = Counter(votes).most_common(1)[0][1] / k
    return result, confidence


# esult = k_nearest_algorithm(data_set, new_features)
# print(result)

df = pd.read_csv('data-sets/breast-cancer-wisconsin.data.txt')
df.replace('?', -99999, inplace=True)
df.drop(['id'], 1, inplace=True)

full_data = df.astype(float).values.tolist()
random.shuffle(full_data)

train_set = {2: [], 4: []}
testsize = 0.2
test_set = {2: [], 4: []}

train_data = full_data[:-(int(testsize * len(full_data)))]
test_data = full_data[-(int(testsize * len(full_data))):]

for i in train_data:
    train_set[i[-1]].append(i[:-1])

for i in test_data:
    test_set[i[-1]].append(i[:-1])

correct = 0
total = 0
for group in test_set:
    for data in test_set[group]:
        vote, confidence = k_nearest_algorithm(train_set, data, k=5)
        if group == vote:
            correct += 1
        else:
            print(confidence)
        total += 1

print("Accuracy is  ", correct / total)


# [[plot.scatter(ii[0], ii[1], s=50, color=i) for ii in data_set[i]] for i in data_set]
# plot.scatter(new_features[0], new_features[1], s=90, color=result)
# plot.show()
